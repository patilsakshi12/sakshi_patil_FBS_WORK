                                                     Set A

1. Write an SQL query to retrieve all employees' names and salaries from a table named
`Employees`, ordered by salary in descending order.
 
Select e_name,salary from employees
ordered by salary desc;

2. Retrieve the top 5 highest-paid employees from the `Employees` table.
 
 Select e_name,salary from employees
 order by salary desc
 limit 5;

3. Fetch employee records from the `Employees` table, skipping the first 3 records and showing
the next 5 records.

 Select * from employees
 limit 5 offset 3;

4. Write a query to count the number of employees in each department from the `Employees`
table.
  
   Select dept_id,count(e_id) as "Employee_count"
   from employees
   Group by dept_id;

5. Fetch the department-wise average salary from the `Employees` table, only for departments
where the average salary is greater than 50,000.
   
   Select dept_id, avg(salary) 
   From employees
   Group by dept_id
   Having avg(salary)>50000;

6. Retrieve a list of products from the `Products` table where the product name contains the word
"Laptop" .
   
   Select * From products
   where  product_name Like '%Laptop%';

7. Extract the first three characters from the `student_name` column in the `Students` table.
     
    select substring(student_name ,1,3)
    from students;

8. Fetch only those students from the `Students` table whose names start with the letter "A".
   
    Select * from students
    where student_name like "A%";

9. Write an SQL query to find the total number of orders placed in each month, considering only
those months where more than 100 orders were placed.

     select month(order_date), count(order_id) as "Number_of_orders"
     from orders 
     Group by month(order_date)
     Having count(order_id)>100;

10. Get the total and average sales amount per category from the `Sales` table, considering only
categories with total sales greater than 1,00,000.
       
    Select category, sum(sales_amount), avg(sales_amount)
    from sales
    group by category
    having sum(sales_amount)>100000;

11. What does the following query return?
SELECT COUNT(*) FROM Employees;
a) The total number of employees
b) The sum of salaries of employees
c) The first record of the table
d) An error message
ANS
a) The total number of employees

12. What will be the output of the following query?
SELECT LENGTH('Database');
a) 9
b) 8
c) 10
d) Error
ANS
b) 8

13. Which of the following clauses is used to filter grouped results?
a) WHERE
b) ORDER BY
c) HAVING
d) GROUP BY
ANS
c) HAVING

14. What does `LEFT JOIN` do?
a) Returns only the matching rows from both tables
b) Returns all rows from the left table and matching rows from the right table
c) Returns all rows from the right table and matching rows from the left table
d) Returns all rows from both tables
ANS
b) Returns all rows from the left table and matching rows from the right table

15. What will be the result of the following query?
SELECT UPPER('hello world');
a) hello world
b) HELLO WORLD
c) Hello World
d) Syntax error
ANS
b) HELLO WORLD

16. Question:
You have two tables:
• Orders with columns: order_id, customer_id, order_date, total_amount.
• Customers with columns: customer_id, region.
• O/P- region | total_orders
Write an SQL query to find the total order amount (total_amount) for each region. Only include
regions where the total order amount is greater than 10000
  
   Select c.region, sum(total_amount) as "total_order"
   from Order as o inner join Customers as c
   on o.customer_id=c.customer_id
   group by c.region
   having sum(total_amount)>10000;

17. Question:
You have two tables:
• Books with columns: book_id, author_id, title, price.
• Sales with columns: sale_id, book_id, sale_date, quantity.
• O/P- author_id | total_books_sold

Write an SQL query to find the total number of books sold by each author. Only include authors
who have sold more than 100 books.
 
   Select b.author as author_id , sum(quantity) as "total_books_sold"
   from books as b inner join Sales as s
   on b.book_id=s.book_id
   group by b.author
   Having sum(quantity)>100;
 

    

  
   